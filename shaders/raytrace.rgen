#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "raycommon.glsl"
#include "host_device.h"

layout(binding = 0, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = 1, rgba32f) uniform image2D outputImage;

layout(push_constant) uniform _PushConstants { PushConstants pc; };

layout(location = 0) rayPayloadEXT hitPayload payload;

void main() {
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + 0.5;
	const vec2 resolution = vec2(gl_LaunchSizeEXT.xy);
	const vec2 uv = pixelCenter / resolution;
	vec2 d = uv * 2.0 - 1.0;

	vec3 origin = (pc.viewInverse * vec4(0,0,0,1)).xyz; 	// the latter being the camera view
																// in view space
	vec4 target = pc.projInverse * vec4(d.x, d.y, 1, 1);
	//vec3 dir = pc.viewInverse * vec4(normalize(target.xyz), 0)).xyz;
	vec3 dir = normalize((pc.viewInverse * vec4(target.xyz, 0)).xyz);

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	float rayMin = 0.001;
	float rayMax = 10000.0;

	traceRayEXT(
		tlas,		// accel struct
		rayFlags,	//
		0xFF,		// cullMask
		0, 			// sbtRecordOffset
		0,			// sbtRecordStride
		0,			// missIndex
		origin, 	//
		rayMin,		// ray min range
		dir,		// ray direction
		rayMax, 	// ray max range
		0			// payload at location 0
	);

	imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(payload.Color, 1.0));
}
